------------------------------------------------------------------------
-- == COPYRIGHT ==
-- Copyright 1974 to current year. AVEVA Solutions Limited and its subsidiaries. All rights reserved in original code only.
--
-- == FILE ==
-- File        = CompleteCheck.pmlfrm
-- Type        = General Form
-- Group       =  
-- Keyword     = PIPING
-- Module      = DESIGN
-- Replaces    = 
--
-- Created     = 22 Oct 2019
-- Revision    = 1.0
-- Author      = Alain Saudemont - AVEVA
--
-- == DESCRIPTION ==
-- description = TECHNIP - To check the TEE/OLET for the project based on XML File
--
-- == MODIFICATIONS ==
-- Date/Author =
-- Description =
-- Date/Author =
-- Description =
------------------------------------------------------------------------

------------------------------------------------------------------------
--
-- Methods defined:
--
--   Method call                    Return              Description
--  =============                  ========            =============
--
------------------------------------------------------------------------


-- dll import pour le lecture du fichier XML
	var !banner banner

	if matchwild(!banner,'*Everything3D Design Mk2*') then
		!dll = |C:\AVEVA\dll-E3D\PMLXmlDocumentE3D2|
	else
		return
	endif

	import '$!dll'
	handle (1000,0)
		-- already loaded
	endhandle

--Dll import for the Net Grid
    import 'GridControl'
	handle (1000,0)
		-- already loaded
	endhandle
	
------------------------------------------------------------------------
--
-- File:            CompleteCheck.pmlfrm
--   Type:          Form Definition
--   Group:         Piping
--     Keyword:     Branch Table Check
--   Module:        Design
--   Replaces:
--
-- Author:          A.Saudemont
-- Created:         24 Oct 2019 
--
-- Description:
-- To check the branch table for the complete model
--
------------------------------------------------------------------------
setup form !!CompleteCheck dialog

    member .revHistory is ARRAY
    !this.revHistory.append(|1.0 28/10/2019 Initial release by AS.|)
    !this.revHistory.append(|1.1 28/10/2019 Ajout d'un tri sur le nom du SITE.|)
    !this.revHistory.append(|1.2 30/01/2020 Ajout d'une méthode pour lancement en batch|)
    !this.revHistory.append(|1.3 18/05/2020 Ajout de colonnes pour les ident|)
    !this.revHistory.append(|1.4 15/07/2020 Ajout de colonnes pour les ident en utilisant le nouveau xml|)
	
	-- 1.1 - Ajout dans le fichier config.xml d'un tri pour extraire que les SITE ayant à la fin de leur nom
	--       la "value" à la fin de la section "SiteName" 
	-- 1.2 - Ajout de la méthode ".savedetailsToCsv()" permettant de lancer l'extraction de la grille
	--       dans un fichier au format .csv
	-- 1.3 - Ajout de 2 colonnes pour inserer les ident
	-- 1.4 - Ajout de 2 colonnes pour inserer les ident en utilisant la nouvelle version
	--       du fichier xml avec le champ "identcode"

	!this.formRevision  = !this.revHistory[!this.revHistory.size()].before(' ')


	-- renseigne différents titre ou attributs
    !this.cancelCall    = |!this.dismiss()|
    !this.callback      = |!this.init()|
	!this.formTitle     = |Technip Check Branch Table - [Rev $!this.formRevision]|

	using namespace 'Aveva.Core.Presentation'
	using namespace 'PMLXmlDocument.PMLXmlDocument'

	container .gridFrameDetails nobox PmlNetControl 'grid' at x0.5 ymax width 180 hei 20

	menu .gridPopupDetails popup
	!this.gridPopupDetails.add( 'CALLBACK', 'Export to Excel...', '!this.savedetailsToExcel()', 'savedetailstoexcel' )
	!this.gridPopupDetails.add( 'CALLBACK', 'Export to CSV file...', '!this.savedetailsToCsv()', 'savedetailstocsv' )
    button .dismiss      |Dismiss| at xmax form-size ymax 


	-- Liste des memebers de la forme
	member .gridDetails          is NetGridControl
	member .branchtablexmldoc    is PMLXmlDocument
	member .linelistcalcbtxmldoc is PMLXmlDocument
	member .configxmldoc         is PMLXmlDocument
	member .inchformat           is format
exit

  ------------------------------------------------------------------------
--
-- Method:      CompleteCheck
--
-- Description: Constructor
--
-- define method Type: Function/Procedure
-- Arguments:
--   [#] [R/RW] [Data Type] [Description]
-- Return:
--   [Data Type] [Description]
--
------------------------------------------------------------------------
define method .CompleteCheck()
	-- namespace
	using namespace |PMLXmlDocument.PMLXmlDocument|
	using namespace |Aveva.Core.Presentation|

	!this.gridDetails = object NetGridControl()
	!this.gridFrameDetails.control = !this.gridDetails.handle()
	!this.gridDetails.addeventhandler(|OnPopup|, !this, |rightClickGridDetails|)
    !this.gridFrameDetails.popup = !this.gridPopupDetails

	-- on définit le format pour les INCH
  	!this.inchformat = object format()
	!this.inchformat.units = 'INCH'

	-- récupère le code du projet
	!project = current project
	!projectcode = !project.code()

	-- initialise le fichier XML pour les branch table
	!this.branchtablexmldoc = object PMLXmlDocument()
	!dfltsfile = object file(|%| & !projectcode & |DFLTS%\TPBranchtable\Spec_Branch.xml|)
	!this.branchtablexmldoc.load(!dfltsfile.fullname())

	-- initialise le fichier XML pour la config
	!this.configxmldoc = object PMLXmlDocument()
	!dfltsfile = object file('%' & !projectcode & 'DFLTS%\TPBranchtable\Config.xml')
	!this.configxmldoc.load(!dfltsfile.fullname())

	-- =======================================================
	-- DEBUT DES CALLBACKS
	-- =======================================================
    !this.dismiss.callback        = |!this.dismiss()|
	-- =======================================================
	-- FIN DES CALLBACKS
	-- =======================================================

endmethod
-- End of method

------------------------------------------------------------------------
--
-- Method:      init
--
-- Description: Initialise
--
-- Method Type: Function/Procedure
-- Arguments:
--   [#] [R/RW] [Data Type] [Description]
-- Return:
--   [Data Type] [Description]
--
------------------------------------------------------------------------
define method .init()
	-- namespace
	using namespace |PMLXmlDocument.PMLXmlDocument|

    -- gestion des unités
	var !UNITS UNITS
	if (MATCH(|$!UNITS|,|MM Bore|) neq 0) THEN
		var !unittext |mm|
	else
		var !unittext |in|
	endif

	Clock init
	-- on cherche tout les TEE et OLET du model
	-- var !allmem collect all with type eq 'TEE' or type eq 'OLET'
	!allmem = object collection()
	!types = |TEE OLET|
	!allmem.types(!types.split())

	-- Filtre le purpose du site
	!purp    = !this.configxmldoc.selectnodes(|//Setting[@name='SitePurp']|)
	
	-- AS - Début Modif 1.1
	!SiteNam = !this.configxmldoc.selectnodes(|//Setting[@name='SiteName']|)
	!purpval = |PURPOSE OF SITE EQ '| & !purp[1].value('@value') & |' and matchwild ( name of site, '*| & !SiteNam[1].value('@value') & |')|
	-- q var !purpval
	-- AS - Fin Modif 1.1
	
	!expression = object expression(!purpval)
	!allmem.filter(!expression)

	!allmems = !allmem.results()
	-- q var !allmemse
	
	-- Create headings
	!headings = object array()
	!headings.append('Site Name')
	!headings.append('Zone Name')
	!headings.append('Pipe Name')
	!headings.append('Branch Name')
	!headings.append('Tee/Olet Name')
	!headings.append('Type')
	!headings.append('Status')
	!headings.append('Piping Specification')
	!headings.append('Header Diameter')
	!headings.append('Branch Diameter')
	!headings.append('Current Stype')
	!headings.append('Current Ident')
	!headings.append('Target Stype')
	!headings.append('Target Ident')
	!headings.append('Error Message')

	!data = object array()

	-- set progressbar
	!!FMSYS.Setprogress(0)
	!rownum = 0

	do !memobj values !allmems
		!rownum = !rownum + 1
		-- !memobj = object DBREF(!mem)
		!b = array()

		-- Site Name
		!b.append(!memobj.owner.owner.owner.owner.name)
		-- Zone Name
		!b.append(!memobj.owner.owner.owner.name)
		-- Pipe Name
		!b.append(!memobj.owner.owner.name)
		-- Branch Name
		!b.append(!memobj.owner.name)
		-- Tee/Olet Refno
		!b.append(!memobj.name)
		-- Type
		!b.append(!memobj.type)
		-- Status
		!b.append('')
		-- Specification
		if badref(!memobj.spown) then
			!sprefname = 'nulref'
		else
			!sprefname = !memobj.spown.name
		endif
		!b.append(!sprefname)
		-- header bore
		!headerbore = !memobj.ppbore[1].string().before(!unittext)
		!b.append(!headerbore)
		-- branch bore
		!branchbore = !memobj.ppbore[3].string().before(!unittext)
		-- spref s'applique aux composants
		!b.append(!branchbore)
		-- Current Type
		!b.append(!memobj.stype.before('_'))
		handle any
			!b.append(|Unset|)
		endhandle

        --AS Début Modif 1.3 - Ajout de l'ident
		-- Current Ident
		!b.append(!memobj.spref.:TP-IDENT)
        --AS Fin Modif 1.3 - Ajout de l'ident
		
		-- on gère les unités : MARIAN ne travaille qu'en INCH
		if (MATCH(|$!UNITS|,|MM Bore|) neq 0) THEN
			-- Si le projet est en mm
			!tpcurbore = object bore()
			!tpcurbore.bore(!headerbore.real())
			!headermm   = !tpcurbore.string()
			!headermm   = !headermm.replace('.50','.5').replace('.00','').replace('0.','.')

			!headerbore = !tpcurbore.string(!this.inchformat)
			!headerbore = !headerbore.replace('.50','.5').replace('.00','').replace('0.','.')

			!tpcurbore.bore(!branchbore.real())
			!branchmm   = !tpcurbore.string()
			!branchmm   = !branchmm.replace('.50','.5').replace('.00','').replace('0.','.')

			!branchbore = !tpcurbore.string(!this.inchformat)
			!branchbore = !branchbore.replace('.50','.5').replace('.00','').replace('0.','.')
		else
			-- le projet est en inches
			!headerbore = !headerbore.replace('.50','.5').replace('.00','').replace('0.','.')
			!branchbore = !branchbore.replace('.50','.5').replace('.00','').replace('0.','.')
		endif

		-- on retrouve le STYPE target
		-- !spec = !memobj.owner.pspe.namn
		!spec = !memobj.spown.namn
		!stype = !this.getStype(!spec,!headerbore,!branchbore)
		!errormsg = !stype.after('#')
		!b.append(!stype.before('#'))



		  --AS Début Modif 1.3 - Ajout de l'ident
		  -- on recherche l'Ident target
		  if (MATCH(|$!UNITS|,|MM Bore|) neq 0) THEN
		  	!headerdia = !headermm
		  	!branchdia = !branchmm
		  else
		  	!headerdia = !headerbore
		  	!branchdia = !branchbore	
		  endif

		  -- AS Début Modif 1.4 - Ajout de l'ident - voir la méthode
		  !ident = !this.getIdent(!spec,!headerdia,!branchdia,!stype)
		  -- AS Fin Modif 1.4 - Ajout de l'ident

		  !b.append(!ident)
		  --AS Fin Modif 1.3 - Ajout de l'ident

		-- On ajoute les messages d'erreurs si besoin
		!b.append(!stype.after('#'))
	    !data.append(!b)
		

		-- progress bar
		!progress = !rownum / !allmems.size() * 100
		!!FMSYS.Setprogress(!progress)

	enddo

	-- Bind data to grid
	using namespace  'Aveva.Core.Presentation'
	!nds = object NetDataSource('Grid Control Example', !headings, !data)
	!this.gridDetails.BindToDataSource(!nds)

	-- affiche les status et les couleurs
	!this.updateDetailsBT()

	$p Time to Fill the GRID
	Clock read elapsed  

endmethod
-- End of method

------------------------------------------------------------------------
--
-- Method:      getStype
--
-- Description: Cette méthode retrouve le stype théorique à partir du fichier XML pour les tableaux de piguage
--
-- Method Type: Function/Procedure
-- Arguments:
--   [#] [R/RW] [Data Type] [Description]
-- Return:
--   [Data Type] [Description]
--
------------------------------------------------------------------------
define method .getStype(!spec is string, !headerbore is string , !branchbore is string) is STRING
	-- récupère le noeud pipename dans le XML branch table
	!specnode = !this.branchtablexmldoc.selectnodes(|//BranchTable[@value='| + !spec + |']|)
	if not !specnode.size() gt 0 then
		return ('Not found#Spec ' + !spec + ' not found in branch table file')
	endif

	-- récupère le noeud diametre collecteur
	!diamheadernode = !specnode[1].selectnodes(|DiamHeader[@value='| + !headerbore + |']|)
	if not !diamheadernode.size() gt 0 then
		return ('Not found#Header diameter ' + !headerbore + ' not found in branch table file for spec ' + !spec)
	endif

	-- récupère le noeud diamètre sortie
	!diamoutnode = !diamheadernode[1].selectnodes(|DiamBranch[@value='| + !branchbore + |']|)
	if not !diamoutnode.size() gt 0 then
		return ('Not found#Branch diameter ' + !branchbore + ' not found in branch table file for header diameter ' + !headerbore + ' for spec ' + !spec)
	endif

	-- renvoie le STYPE
	return !diamoutnode[1].value('@stype')
endmethod
-- End of method

------------------------------------------------------------------------
-- AS Début Modif 1.3 - Ajout de l'ident
-- Method:      getIdent
--
-- Description: Cette méthode retrouve l'Ident à partir du fichier XML pour les tableaux de piguage
--
-- Method Type: Function/Procedure
-- Arguments:
--   [#] [R/RW] [Data Type] [Description]
-- Return:
--   [Data Type] [Description]
--
------------------------------------------------------------------------
define method .getIdent(!spec is string, !headerbore is string , !branchbore is string, !stype is string) is STRING
	
    !TargStype = !stype.before('#')
	-- !specnam = |/| & !spec
	
	if !TargStype.eq('Not found') then
		return (|???|)
	else
		-- AS Début Modif 1.4 - Ajout de l'ident extrait du fichier .xml
		-- récupère le noeud pipename dans le XML branch table
		!specnode = !this.branchtablexmldoc.selectnodes(|//BranchTable[@value='| + !spec + |']|)
		if not !specnode.size() gt 0 then
			return ('??')
		endif
	
		-- récupère le noeud diametre collecteur
		!diamheadernode = !specnode[1].selectnodes(|DiamHeader[@value='| + !headerbore + |']|)
		if not !diamheadernode.size() gt 0 then
			return ('??')
		endif
	
		-- récupère le noeud diamètre sortie
		!diamoutnode = !diamheadernode[1].selectnodes(|DiamBranch[@value='| + !branchbore + |']|)
		if not !diamoutnode.size() gt 0 then
			return ('??')
		endif

		-- renvoie le IDENT CODE
		!TargStype = !diamoutnode[1].value('@idencode')
		if !TargStype.eq(||) then
			!TargStype = |No Ident in XML|
		endif
		
		return !TargStype
		--AS Fin Modif 1.4 - Ajout de l'ident

	endif
	
	-- !CollBran = object collection()
	-- !CollBran.scope(!specnam.dbref())
	-- !CollBran.type(|SPCO|)
	-- !SpcoSearch = |styp eq '| & !stype & |' and p1bore eq | & !headerbore & | and p3bore eq | & !branchbore
	-- -- q var !SpcoSearch
	-- !expression = object expression(!SpcoSearch)
	-- !CollBran.filter(!expression)
	-- 
	-- !SpcoList = !CollBran.results()
	-- -- q var !SpcoList[1]
	-- if !SpcoList.size().gt(0) then
	-- 	!TargStype = !SpcoList[1].:TP-IDENT
	-- else
	-- 	!TargStype = |??|
	-- endif
	-- 
	--  return !TargStype

endmethod
-- End of method
--AS Fin Modif 1.3 - Ajout de l'ident

------------------------------------------------------------------------
--
-- Method:      rightClickGridDetails
--
-- Description: cette méthode est appelée par le eventhanler pour le "rightclickgriddetails"
--
-- Method Type: Function/Procedure
-- Arguments:
--   [#] [R/RW] [Data Type] [Description]
-- Return:
--   [Data Type] [Description]
--
------------------------------------------------------------------------
define method .rightClickGridDetails(!data is ARRAY)
-- $p right click detail
    !this.gridFrameDetails.showPopup(!data[0], !data[1])

endmethod
-- End of method

------------------------------------------------------------------------
--
-- Method:      updateDetailsBT
--
-- Description: cette méthode met à jour la grille "details" pour les branch table : couleurs et messages
--
-- Method Type: Function/Procedure
-- Arguments:
--   [#] [R/RW] [Data Type] [Description]
-- Return:
--   [Data Type] [Description]
--
------------------------------------------------------------------------
define method .updateDetailsBT()
	-- on reparcours la grille et on met status/couleur
	!pixmap = !!pml.getpathname('exclamation-16.png')
	!Rows = !this.gridDetails.GetRows()

	-- Numéro des colonnes a traiter
	!Stat = 7
	!Curr = !Stat + 4
	!Targ = !Stat + 6
	!Erro = !Stat + 8

	!rownum = 0
	do !row values !Rows
		!rownum = !rownum + 1
		!mem = object DBREF(!row[1])

		-- on ne fait rien pour les PIPE et les BRAN
		if not !mem.type eq 'PIPE' and not !mem.type eq 'BRAN' then
				-- on va comparer les STYPE
				if !this.gridDetails.getcell(!rownum, !Curr ) ne !this.gridDetails.getcell(!rownum, !Targ ) then
					!this.gridDetails.setCellColor(!rownum, !Stat , 'salmon')
					!this.gridDetails.setCellValue(!rownum,!Stat, 'Failed')
					!this.gridDetails.setCellImage(!rownum,!Stat, !pixmap)
					if !this.gridDetails.getcell(!rownum, !Erro ) eq '' then
						!this.gridDetails.setcellvalue(!rownum, !Erro, 'Current styp and target stype are different')
					endif
					!this.gridDetails.setCellColor(!rownum, !Erro , 'lightyellow')
				else
					!this.gridDetails.setCellColor(!rownum, !Stat , 'lightgreen')
					!this.gridDetails.setCellValue(!rownum,!Stat, 'Passed')
				endif
		endif
		-- progress bar
		!progress = !rownum / !rows.size() * 100
		!!FMSYS.Setprogress(!progress)
	enddo

	-- Hide the Progress
	!!FMSYS.Setprogress(0)
endmethod
-- End of method

------------------------------------------------------------------------
--
-- Method:      savedetailsToExcel
--
-- Description: Cette methode exporte la grille vers excel
--
-- Method Type: Function/Procedure
-- Arguments:
--   [#] [R/RW] [Data Type] [Description]
-- Return:
--   [Data Type] [Description]
--
------------------------------------------------------------------------
define method .savedetailsToExcel()
	import 'PMLFileBrowser'
	Handle Any
	Endhandle
	using namespace 'Aveva.Core.Presentation'
	-- couleur alternative : blanc
	!this.gridDetails.setAlternateRowColor('white')
	var !pdmuser evar 'PDMSUSER'
	!browser = object PMLFileBrowser('SAVE')
	!filename = 'CheckBranchTableComplete.xlsx'
	!browser.show(!pdmuser,!filename,'Save Grid to Excel',false, 'Excel Documents|*.xlsx',1)
	-- Q VAR !browser.methods()
	!this.gridDetails.SaveGridToExcel(!browser.file())
	handle any
	endhandle
	-- couleur alternative : gris
	!this.gridDetails.setAlternateRowColor('grey')
endmethod
-- End of method

------------------------------------------------------------------------
--
-- Method:      savedetailsToCSV
--
-- Description: Cette methode exporte la grille vers excel
--
-- Method Type: Function/Procedure
-- Arguments:
--   [#] [R/RW] [Data Type] [Description]
-- Return:
--   [Data Type] [Description]
--
------------------------------------------------------------------------
define method .savedetailsToCsv()

	-- récupère le code du projet
	!project = current project
	!projectcode = !project.code()

	!dflts = !projectcode & |DFLTS|
	var !dirdflts evar $!dflts

	-- dans repertoire xxx-report\piping	
	!RepDir    = !dirdflts.replace(|dflts|,|-report|)
	!RepDirPip = !RepDir & |\piping|

	!RepDirect    = object file(!RepDir)
	!RepDirectPip = object file(!RepDirPip)

	if !RepDirect.exists() then
		if !RepDirectPip.exists().not() then
			!command = |syscom 'mkdir | & !RepDirPip & |'|
			$!command		
		endif
	else
		!command = |syscom 'mkdir | & !RepDir & |'|
		$!command
		!command = |syscom 'mkdir | & !RepDirPip & |'|
		$!command
	endif
	
	-- Create headings
	!heading = |Site Name;Zone Name;Pipe Name;Branch Name;Tee/Olet Name;Type;Status;Piping Specification;Header Diameter;Branch Diameter;Current Stype;Target Stype;Error Message|
	!liste = object array()
	!liste.append(!heading)
	
	-- Nom du fichier CSV
	!FileCsv = object file(|$!RepDirectPip\CheckBranchTableComplete.csv|)
	-- q var !FileCsv
	-- Extraction du contenu de la grille dans la forme
	!Rows = !this.gridDetails.GetRows()
	
	-- Création des lignes du fichier CSV avec séparateur ";" 
	do !row index !Rows
		!ligne = ||
		do !i index !Rows[!row]
			!ligneadd = !Rows[!row][!i] & |;|
			!ligne = !ligne & !ligneadd
		enddo
		!liste.append(!ligne)
	enddo

	-- Ecriture du fichier .CSV
	!FileCsv.writefile(|OVERWRITE|,!liste)

endmethod
-- End of method

------------------------------------------------------------------------
--
-- Method:      dismiss
--
-- Description: Dismiss form
--
-- Method Type: Function/Procedure
-- Arguments:
--   [#] [R/RW] [Data Type] [Description]
-- Return:
--   [Data Type] [Description]
--
------------------------------------------------------------------------
define method .dismiss()
	-- Hide form
	!this.hide()
endmethod
-- End of method

